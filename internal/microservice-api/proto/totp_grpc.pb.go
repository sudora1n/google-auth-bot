// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: totp.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ToTPsClient is the client API for ToTPs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToTPsClient interface {
	AddToTP(ctx context.Context, in *AddToTPRequest, opts ...grpc.CallOption) (*AddToTPResponse, error)
	FindAllToTP(ctx context.Context, in *FindAllToTPRequest, opts ...grpc.CallOption) (*FindAllToTPResponse, error)
	RemoveToTP(ctx context.Context, in *RemoveToTPRequest, opts ...grpc.CallOption) (*RemoveToTPResponse, error)
}

type toTPsClient struct {
	cc grpc.ClientConnInterface
}

func NewToTPsClient(cc grpc.ClientConnInterface) ToTPsClient {
	return &toTPsClient{cc}
}

func (c *toTPsClient) AddToTP(ctx context.Context, in *AddToTPRequest, opts ...grpc.CallOption) (*AddToTPResponse, error) {
	out := new(AddToTPResponse)
	err := c.cc.Invoke(ctx, "/grpc_service.ToTPs/AddToTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toTPsClient) FindAllToTP(ctx context.Context, in *FindAllToTPRequest, opts ...grpc.CallOption) (*FindAllToTPResponse, error) {
	out := new(FindAllToTPResponse)
	err := c.cc.Invoke(ctx, "/grpc_service.ToTPs/FindAllToTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toTPsClient) RemoveToTP(ctx context.Context, in *RemoveToTPRequest, opts ...grpc.CallOption) (*RemoveToTPResponse, error) {
	out := new(RemoveToTPResponse)
	err := c.cc.Invoke(ctx, "/grpc_service.ToTPs/RemoveToTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToTPsServer is the server API for ToTPs service.
// All implementations must embed UnimplementedToTPsServer
// for forward compatibility
type ToTPsServer interface {
	AddToTP(context.Context, *AddToTPRequest) (*AddToTPResponse, error)
	FindAllToTP(context.Context, *FindAllToTPRequest) (*FindAllToTPResponse, error)
	RemoveToTP(context.Context, *RemoveToTPRequest) (*RemoveToTPResponse, error)
	mustEmbedUnimplementedToTPsServer()
}

// UnimplementedToTPsServer must be embedded to have forward compatible implementations.
type UnimplementedToTPsServer struct {
}

func (UnimplementedToTPsServer) AddToTP(context.Context, *AddToTPRequest) (*AddToTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToTP not implemented")
}
func (UnimplementedToTPsServer) FindAllToTP(context.Context, *FindAllToTPRequest) (*FindAllToTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllToTP not implemented")
}
func (UnimplementedToTPsServer) RemoveToTP(context.Context, *RemoveToTPRequest) (*RemoveToTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveToTP not implemented")
}
func (UnimplementedToTPsServer) mustEmbedUnimplementedToTPsServer() {}

// UnsafeToTPsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToTPsServer will
// result in compilation errors.
type UnsafeToTPsServer interface {
	mustEmbedUnimplementedToTPsServer()
}

func RegisterToTPsServer(s grpc.ServiceRegistrar, srv ToTPsServer) {
	s.RegisterService(&ToTPs_ServiceDesc, srv)
}

func _ToTPs_AddToTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToTPsServer).AddToTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_service.ToTPs/AddToTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToTPsServer).AddToTP(ctx, req.(*AddToTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToTPs_FindAllToTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllToTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToTPsServer).FindAllToTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_service.ToTPs/FindAllToTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToTPsServer).FindAllToTP(ctx, req.(*FindAllToTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToTPs_RemoveToTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveToTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToTPsServer).RemoveToTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_service.ToTPs/RemoveToTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToTPsServer).RemoveToTP(ctx, req.(*RemoveToTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToTPs_ServiceDesc is the grpc.ServiceDesc for ToTPs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToTPs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_service.ToTPs",
	HandlerType: (*ToTPsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToTP",
			Handler:    _ToTPs_AddToTP_Handler,
		},
		{
			MethodName: "FindAllToTP",
			Handler:    _ToTPs_FindAllToTP_Handler,
		},
		{
			MethodName: "RemoveToTP",
			Handler:    _ToTPs_RemoveToTP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "totp.proto",
}
