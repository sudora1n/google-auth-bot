# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import totp_pb2 as totp__pb2


class ToTPsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddToTP = channel.unary_unary(
                '/grpc_service.ToTPs/AddToTP',
                request_serializer=totp__pb2.AddToTPRequest.SerializeToString,
                response_deserializer=totp__pb2.AddToTPResponse.FromString,
                )
        self.FindAllToTP = channel.unary_unary(
                '/grpc_service.ToTPs/FindAllToTP',
                request_serializer=totp__pb2.FindAllToTPRequest.SerializeToString,
                response_deserializer=totp__pb2.FindAllToTPResponse.FromString,
                )
        self.RemoveToTP = channel.unary_unary(
                '/grpc_service.ToTPs/RemoveToTP',
                request_serializer=totp__pb2.RemoveToTPRequest.SerializeToString,
                response_deserializer=totp__pb2.RemoveToTPResponse.FromString,
                )


class ToTPsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddToTP(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindAllToTP(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveToTP(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ToTPsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddToTP': grpc.unary_unary_rpc_method_handler(
                    servicer.AddToTP,
                    request_deserializer=totp__pb2.AddToTPRequest.FromString,
                    response_serializer=totp__pb2.AddToTPResponse.SerializeToString,
            ),
            'FindAllToTP': grpc.unary_unary_rpc_method_handler(
                    servicer.FindAllToTP,
                    request_deserializer=totp__pb2.FindAllToTPRequest.FromString,
                    response_serializer=totp__pb2.FindAllToTPResponse.SerializeToString,
            ),
            'RemoveToTP': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveToTP,
                    request_deserializer=totp__pb2.RemoveToTPRequest.FromString,
                    response_serializer=totp__pb2.RemoveToTPResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_service.ToTPs', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ToTPs(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddToTP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service.ToTPs/AddToTP',
            totp__pb2.AddToTPRequest.SerializeToString,
            totp__pb2.AddToTPResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindAllToTP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service.ToTPs/FindAllToTP',
            totp__pb2.FindAllToTPRequest.SerializeToString,
            totp__pb2.FindAllToTPResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveToTP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service.ToTPs/RemoveToTP',
            totp__pb2.RemoveToTPRequest.SerializeToString,
            totp__pb2.RemoveToTPResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
